const asyncHandler = require('express-async-handler')
const Account = require('../models/AccountModel')
const jwt = require('jsonwebtoken')
const bcrypt = require('bcrypt')


// POST SIGN UP ACCOUNT
const PostAccountSignup = asyncHandler(async(req, res) => {
    try{
        // Pass confirm Pass extracted from the req.body
        const { password, conpassword } = req.body

        // Check If User Avilable
        const existingUsername = await Account.findOne({where : {username: req.body.username}})
        if(existingUsername){
            return res.status(401).json({message: "This Is Already Taking"})
        }

        // Check If Pass and Con Pass Same
        if(password !== conpassword) {
            return res.status(402).json({message : "Password and Confirm Password do not match"})
        }

        // Declire saltRounds as 10
        const saltRounds = 10

        // Declire hashedPassword //Then hashed password generated by the bcrypt algorithm.
        const hashedPassword = await bcrypt.hash(password, saltRounds)

        // Create Accout Function
        const acount = await Account.create({
            name: req.body.name,
            username: req.body.username,
            password: hashedPassword,
            conpassword:  hashedPassword,
            role: req.body.role,
        })

        // Response Acccout
        res.status(201).json(acount)

        // Error Response
    }catch (error) {
        console.error(error)
        res.status(500).send({
            message: "Error occurred while creating a user",
            error: error.message,
        })
    }
})




// POST LOGIN ACCOUNT
const PostAccountLogin = asyncHandler(async(req, res) => {
    try {
        // Pass confirm Password and Username extracted from the req.body
        const { username, password } = req.body;

        // Check If User Avilable this  account
        const account = await Account.findOne({ where: { username } })
        if (!account) {
            res.status(404).json({ message: 'Account Is Not Found' })
        }

        // Check If Password brypt algorithm same
        const isPasswordMatch = await bcrypt.compare(password, account.password)
        if(!isPasswordMatch){
            return res.status(401).json({ message: 'Password And Confrim Password Is Not Match' })
        }

        // Sign In Accout use jwt Token
        const useToken = jwt.sign({
            userId: account.id,
            userRole: account.role,
            Name: account.name,
            userName: username,
            userpass: password
        },
        'RANDOM-TOKEN',{
            expiresIn: '1h',
        }

    )
    // Sign in Response
    res.status(201).send({
        message: 'Login Successful',
        name: account.name,
        role: account.role,
        username: account.username,
        password: account.password,
        useToken
    })

     // Error Response
    } catch (error) {
        console.error(error)
        res.status(500).send({
            message: 'Login failed',
            error: error.message
        })
    }
})


// POST LAGOUT
const PostAccountLogout = asyncHandler(async (req, res) => {
    try {

        // The request Authenticated Acount
        if (req.isAuthenticated()) {
        req.logout();

        // The Response Success Logout and Not Success
        res.status(200).json({ message: 'User logout successful' })
        } else {
        res.status(401).json({ message: 'Unauthorized' })
        }

    // Error Response
    } catch (error) {
        res.status(500).json({ message: 'Internal Server Error' })
    }
})


// GET ALL ACCOUNT
const GetAccount = asyncHandler(async(req, res) => {
    try {
        // Find Account In Database
        const account = await Account.findAll({})

        // Response Accout
        res.status(201).json(account)

        // Error Response
    }catch (error) {
        console.error(error.message)
        res.status(500).json({ message: "Internal server error" })
    }
})

// GET ONE ID ACCOUNT
const GetAccountID = asyncHandler(async(req, res) => {
    try {
        // The account ID extracted from the request parameters.
        const account_id = req.params.id

        // Find Account Id In Database
        const account = await Account.findByPk(account_id)
        if(!account){
            return res.status(404).json({message:  `Cannot Find Any Account Admin ID ${account_id}`})
        }
        // Reponse Accout
        res.status(201).json(account)

    // Error Response
    }catch (error) {
        console.error(error.message)
        res.status(500).json({ message: "Internal server error" })
    }
})

// PUT ONE ID ACCOUNT
const PutAccountID = asyncHandler(async(req, res) => {
    try {
        // The account ID extracted from the request parameters.
        const account_id = req.params.id

        // Find Account Id In Database
        const account = await Account.findByPk(account_id)
        if(!account){
            return res.status(404).json({message:  `Cannot Find Any Account Admin ID${account_id}`})
        }

        // Account object to update in the database.
        const account_update = await account.update(req.body)
        // Reponse Accout
        res.status(201).json(account_update)

        // Error Response
    }catch (error) {
        console.error(error.message)
        res.status(500).json({ message: "Internal server error" })
    }
})

// DELETE ONE ID ACCOUNT
const DeleteAccountID = asyncHandler(async(req, res) => {
    try {
        // The account ID extracted from the request parameters.
        const account_id = req.params.id

        // Find Account Id In Database
        const account = await Account.findByPk(account_id)
        if(!account){
            return res.status(404).json({message:  `Cannot Find Any Account Admin ID ${account_id}`})
        }

        // Account object to Delete in the database.
        const account_update = await account.destroy(req.body)

        // Reponse Your Accout To Delete and Success Message
        res.status(201).json({account_update, message: "Admin Account Succes Delete"});

        // Error Response
    }catch (error) {
        console.error(error.message)
        res.status(500).json({ message: "Internal server error" })
    }
})



module.exports = {
    GetAccount,
    GetAccountID,
    PutAccountID,
    DeleteAccountID,
    PostAccountSignup,
    PostAccountLogin,
    PostAccountLogout
}